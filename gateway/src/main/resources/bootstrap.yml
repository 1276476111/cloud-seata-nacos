server:
  port: 8222
spring:
  application:
    name: gateway-service
  #  profiles:
  #    active: dev
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true # 是否和服务注册与发现组件进行整合; 设置为 true 后可以直接使用应用名称调用服务， 即在nacos等注册中心中可以发现服务
          lower-case-service-id: true # 将路由的路径修改为小写的服务ID
      # 路由（routes：路由，它由唯一标识（ID）、目标服务地址（uri）、一组断言（predicates）和一组过滤器组成（filters）； filters 不是必需参数。）
      routes:
        - id: order-service # 路由标识（id：标识，具有唯一性）
          uri: lb://order-service # 目标服务地址（通过名字来转发， 也可以是地址）
          predicates: # 断言（各种 Predicates 同时存在于同一个路由时，请求必须同时满足所有的条件才被这个路由匹配； 路由断言，配置时必须得有一项，不一定是Path；）
            - Path=/api/order/**                                  #匹配 如 localhost:3001/consumer/test的请求地址
            # - RemoteAddr=192.168.0.16,192.168.0.184             #ip地址匹配， 不匹配的会访问不到展示404（这里和白名单不一样。 白名单是不校验直接通过。 这个是只有匹配到才通过）
            # - Header=X-Request-Id, \d+                          #请求头匹配
            # - Host=**.baidu.com                                 #host域名匹配,  www.baidu.com,md.baidu.com
            # - Method=GET                                        #请求方式匹配
            # - Query=smile                                       #请求参数匹配  ,eg:localhost:8080?smile=x&id=2
            # - After=2019-01-01T00:00:00+08:00[Asia/Shanghai]    #匹配 2019年1月1日0点0分0秒之后的所有请求， -Before 为之前
            # - Between=2019-01-01T00:00:00+08:00[Asia/Shanghai], 2019-07-01T00:00:00+08:00[Asia/Shanghai] #匹配时间范围之内
#          filters:
#            - TokenAuthenticationFilter   # GatewayFilter 过滤器
#            - StripPrefix=1
        - id: stock-service
          uri: lb://stock-service
          # 断言
          predicates:
            - Path=/api/stock/**
            #- RemoteAddr=192.168.0.16,172.19.2.181,168.10.11.3
          #限流
          filters:     #GateWay限流是基于Redis使用令牌桶算法实现的，所以要引入Redis依赖
            - name: RequestRateLimiter #想要实现限流， 则此过滤器名称不能换
          args:
            redis-rate-limiter:
              replenishRate: 1     #允许用户每秒处理多少个请求
              burstCapacity: 20    #令牌桶的容量，允许在 1s 内完成的最大请求数
              requestedTokens: 1   #每次请求消耗几个令牌，可以控制不同频率，默认1
            key-resolver: "#{@ipKeyResolver}"       #使用 SpEL 按名称引用 bean
#            retries: 3                              #重试次数，默认值是 3 次
#            series: SERVER_ERROR                    #状态码配置（分段），符合某段状态码才会进行重试逻辑，默认值是 SERVER_ERROR，值是 5，也就是 5XX（5 开头的状态码），共有 5 个值

#      处理跨域请求问题
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOrigins: "*"
            allowedMethods: "*"



