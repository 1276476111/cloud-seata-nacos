<?xml version="1.0" encoding="UTF-8"?>
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置， 当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<Configuration monitorInterval="5">
    <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->

    <!--变量配置-->
    <Properties>
        <!-- 日志格式【%date：日期； %thread：线程名； %-5level：级别从左显示5个字符宽； %logger{36}：Logger名字最长36个字符； %msg：日志消息；%n：换行符 -->
        <!-- 控制台彩色日志输出-->
        <property name="LOG_CONSOLE_PATTERN" value="%clr{%d{yyyy-MM-dd HH:mm:ss.SSS}}{faint} [%clr{%5p} ] %clr{${sys:PID}}{magenta} %clr{-&#45;&#45;}{faint} %clr{[%15.15t ]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n%xwEx" />
        <!-- 日志文件输出格式 -->
        <property name="LOG_FILE_PATTERN" value="%date{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n" />
        <!-- 定义日志存储的路径，不要配置相对路径 -->
        <property name="FILE_PATH" value="D:/workspace/me/cloud-seata-nacos/logs" />
        <!-- 日志前缀 -->
        <property name="FILE_NAME" value="order" />
    </Properties>

    <!--日志属性配置 -->
    <!-- RollingFile 配置一个，就对应着一个输出文件； -->
    <appenders>

        <!-- 控制台输出 -->
        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="${LOG_CONSOLE_PATTERN}"/>
            <!--控制台只输出level及其以上级别的信息，其他的直接拒绝-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
        </console>

        <!-- 临时文件【打印出所有级日志信息，这个log每次运行程序会自动清空】-->
        <File name="FileLog" fileName="${FILE_PATH}/all.log" append="false">
            <PatternLayout pattern="${LOG_FILE_PATTERN}"/>
        </File>

        <!-- 打印debug及以下级别的信息【每次大小超过size进行压缩。fileName：输出的文件； filePattern：压缩的文件】-->
        <RollingFile name="RollingFileDebug" fileName="${FILE_PATH}/debug.log" filePattern="${FILE_PATH}/${FILE_NAME}-debug-%d{yyyy-MM-dd}_%i.log.gz">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_FILE_PATTERN}"/>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="50MB"/>
                <!-- 超过此size压缩！ 压缩后，被压缩的内容在debug.log中就找不到了 -->
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <!-- DefaultRolloverStrategy属性如不设置，则默认为最多同一文件夹下7个文件开始覆盖-->
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>

        <!-- 打印error及以下级别的信息-->
        <RollingFile name="RollingFileError" fileName="${FILE_PATH}/error.log" filePattern="${FILE_PATH}/${FILE_NAME}-ERROR-%d{yyyy-MM-dd}_%i.log.gz">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_FILE_PATTERN}"/>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1"/>
                <SizeBasedTriggeringPolicy size="10MB"/>
            </Policies>
            <DefaultRolloverStrategy max="15"/>
        </RollingFile>
    </appenders>

    <!-- Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>

        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <Logger name="org.mybatis" level="info" additivity="true">
            <AppenderRef ref="Console"/>
        </Logger>

        <!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在父Logger的appender里输出。-->
        <Logger name="org.springframework" level="info" additivity="false">
            <AppenderRef ref="Console"/>
        </Logger>

        <!-- 指定日志的输出级别，如果package有定制级别，则按package的定制级别走，即使package级别更低 -->
        <Root level="info">
            <appender-ref ref="Console"/>
            <appender-ref ref="FileLog"/>
            <appender-ref ref="RollingFileDebug"/>
            <appender-ref ref="RollingFileError"/>
        </Root>
    </Loggers>

</Configuration>